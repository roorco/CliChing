--- cliching.py	(original)
+++ cliching.py	(refactored)
@@ -23,31 +23,31 @@
 class Line(object):         # It starts the program, intro and choose the line of the hexagram
 
     def intro(self):
-        print "\n"
-        print bcolors.PURPLE + "CliChing by roberto dell'orco 2014" + bcolors.ENDC
-        print "I-Ching on command line"
-        print "Richard Wilhelm traslation 1950"
-        print "CliChing is distribuited under"
-        print "GNU Creative Commons License"
-        print "\n"
+        print("\n")
+        print(bcolors.PURPLE + "CliChing by roberto dell'orco 2014" + bcolors.ENDC)
+        print("I-Ching on command line")
+        print("Richard Wilhelm traslation 1950")
+        print("CliChing is distribuited under")
+        print("GNU Creative Commons License")
+        print("\n")
         Line().question()
 
     def question(self):     # The question can be whatever, but not empty
-        print bcolors.YELLOW + "Please, write your question: " + bcolors.ENDC
-        quest = raw_input('> ')
+        print(bcolors.YELLOW + "Please, write your question: " + bcolors.ENDC)
+        quest = input('> ')
         if quest == '':
             Line().question()
         else:
            Line().exa()
 
     def exa(self):          # I wonder if there is a better way of choosing ramndom lines, seems a bit rigid to me
-        print "Here the exagram from I-Ching: "
-        print "\n"
-        print "Legend:"
-        print "young yin line   -   -"
-        print "young yang line  -----"
-        print "old yin line     - x -"
-        print "old yang line    --o--"
+        print("Here the exagram from I-Ching: ")
+        print("\n")
+        print("Legend:")
+        print("young yin line   -   -")
+        print("young yang line  -----")
+        print("old yin line     - x -")
+        print("old yang line    --o--")
         sleep(1)            # it adds some waiting time, suspence.
         yin_yang = ['-   -', '-   -', '-   -', '-----', '-----', '-----', '- x -', '--o--'] # ratio 3/8+3/8+1/8+1/8
         line1 = random.choice(yin_yang)
@@ -56,15 +56,15 @@
         line4 = random.choice(yin_yang)
         line5 = random.choice(yin_yang)
         line6 = random.choice(yin_yang)
-        print '\n'             
-        print bcolors.BLUE + '6', '\t', line6 + bcolors.ENDC
-        print bcolors.BLUE + '5', '\t', line5 + bcolors.ENDC
-        print bcolors.BLUE + '4', '\t', line4 + bcolors.ENDC
-        print bcolors.BLUE + '3', '\t', line3 + bcolors.ENDC
-        print bcolors.BLUE + '2', '\t', line2 + bcolors.ENDC
-        print bcolors.BLUE + '1', '\t', line1 + bcolors.ENDC
+        print('\n')             
+        print(bcolors.BLUE + '6', '\t', line6 + bcolors.ENDC)
+        print(bcolors.BLUE + '5', '\t', line5 + bcolors.ENDC)
+        print(bcolors.BLUE + '4', '\t', line4 + bcolors.ENDC)
+        print(bcolors.BLUE + '3', '\t', line3 + bcolors.ENDC)
+        print(bcolors.BLUE + '2', '\t', line2 + bcolors.ENDC)
+        print(bcolors.BLUE + '1', '\t', line1 + bcolors.ENDC)
         sleep(1)               
-        print '\n'             
+        print('\n')             
                                
         T = Trans(line1, line2 , line3, line4, line5, line6)
         T.binary()             
@@ -108,8 +108,8 @@
             global iching_A
             iching_A = iching64.exa[num]
             name = iching64.name[iching_A].decode('utf-8')
-        print name
-        print '----------------------------------'
+        print(name)
+        print('----------------------------------')
         
         M = Mutation(self.line1, self.line2, self.line3, self.line4, self.line5, self.line6)
         return M.match()
@@ -141,24 +141,24 @@
             M = Mutation(mline1, mline2, mline3, mline4, mline5, mline6)
             M.exa()
         else:
-            print "\n"
-            raw_input('Press Enter to read the response')
+            print("\n")
+            input('Press Enter to read the response')
             R = Response()
             R.wilhelm()
 
     def exa(self):          # Prints mutation with a different color from first one
-        print "\n"
-        raw_input('Press Enter to see the mutation')
-        print "This is the mutation"
+        print("\n")
+        input('Press Enter to see the mutation')
+        print("This is the mutation")
         #sleep(1)
-        print '\n'
-        print bcolors.YELLOW + '6', '\t', self.line6 + bcolors.ENDC
-        print bcolors.YELLOW + '5', '\t', self.line5 + bcolors.ENDC
-        print bcolors.YELLOW + '4', '\t', self.line4 + bcolors.ENDC
-        print bcolors.YELLOW + '3', '\t', self.line3 + bcolors.ENDC
-        print bcolors.YELLOW + '2', '\t', self.line2 + bcolors.ENDC
-        print bcolors.YELLOW + '1', '\t', self.line1 + bcolors.ENDC
-        print '\n'
+        print('\n')
+        print(bcolors.YELLOW + '6', '\t', self.line6 + bcolors.ENDC)
+        print(bcolors.YELLOW + '5', '\t', self.line5 + bcolors.ENDC)
+        print(bcolors.YELLOW + '4', '\t', self.line4 + bcolors.ENDC)
+        print(bcolors.YELLOW + '3', '\t', self.line3 + bcolors.ENDC)
+        print(bcolors.YELLOW + '2', '\t', self.line2 + bcolors.ENDC)
+        print(bcolors.YELLOW + '1', '\t', self.line1 + bcolors.ENDC)
+        print('\n')
 
         T = Trans(self.line1, self.line2, self.line3, self.line4, self.line5, self.line6)
         T.binary()
